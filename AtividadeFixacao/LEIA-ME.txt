----- Criando Projeto -----
No canto superior esquerdo, clique Arquivos - Novo - Projeto.
Procure nos tipos de projeto "Aplicativo Web do ASP.NET Core (Model-View-Controller)" 
Nomeie o projeto e selecione a pasta desejada , é Recomendado o uso do .Net 6.0.

----- Nuget Packeges -----
Para configurar os nugets, na parte superior do visual studio clique na aba de ferramentas,
e em seguida no Gerenciador de pacotes Nuget, vá em Procure para serem instalados 
os seguintes pacotes: 

-- Microsoft.AspNetCore.Identity.EntityFrameworkCore 
-- Microsoft.EntityFrameworkCore.Design
-- Microsoft.EntityFrameworkCore.SqlServer

-----  Classifique Piscologo e DbContext -----
Para adiconar uma classe, clique botão direito na pasta Models va em adicionar e Novo item,
selecione classe e de um nome a classe. 

Crie a classe para o psicologo dentro da pasta Models. 
Para o DbContext crie uma Pasta com o nome "Data" e 
dentro dela crie outra classe com o nome de "AppDbContext".

Escreva o codigo necessário e não se esqueça das referencias USING!!!

----- Configurando SQL Server -----
No arquivo "appsettings.json", desenvolva um administrador e 
conecte ao banco de dados como no exemplo ABAIXO:

/////////////////////////////////////////////////////////////////////
"Data": {
    "AdminUser": {
      "Name": "admin@####.app.br",
      "Email": "admin@#####.app.br",
      "Password": "####@123",
      "Role": "Admin"
    }
  },
  "ConnectionStrings": {
    "PsiuContext": "Server=(localdb)\\MSSQLLocalDB;Database=PSIU;Trusted_Connection=True;MultipleActiveResultSets=True"
  }

- "Server=(localdb) = Local onde vai o servidor.
- MSSQLLocalDB = Servidor local da microsoft SQL.
- Database=PSIU = Nome do banco de dados.
- Trusted_Connection=True = Confiar na conexao do banco de dados.
- MultipleActiveResultSets=True" = Ativação de multiplos resultados.

////////////////////////////////////////////////////////////////////////////

----- Program.cs Parametros -----
Para configuras os parametros do banco primeiro vamos configurar a conexão com o banco,
depois de configurar a conexão temos que configurar as opções como no Exemplo ABAIXO:

//////////////////////////////////////////////////////////////////////////////////
builder.Services.AddDbContext<AppDbContext>(options => 
    options.UseSqlServer( 
        builder.Configuration.			// Conexão com o banco SQL!
            GetConnectionString("PsiuContext") 
    ) 
);

builder.Services.AddIdentity<AppUser, IdentityRole>( 
    options =>
    {
        options.User.RequireUniqueEmail = true; //Email não pode ser repetido em outras contas.
        options.Password.RequiredLength = 6;   // tamanho da senha.
        options.Password.RequireNonAlphanumeric = false; //Obrigar a usar Alphanumericos.
        options.Password.RequireLowercase = false; // Uso Obrigatorio de letras pequenas.
        options.Password.RequireUppercase = false; // Uso Obrigatorio de letra GRANDES.
        options.Password.RequireDigit = false;  // Uso Obrigatório de digitos.
        options.SignIn.RequireConfirmedPhoneNumber = false; // Duas etapas por numero de telefone.
        options.Lockout.MaxFailedAccessAttempts = 5; // Falhas aceitas até bloquear.
        options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(10); //Tempo para desbloquear as tentativas de login.
    }
)
.AddEntityFrameworkStores<AppDbContext>()
.AddDefaultTokenProviders();

//////////////////////////////////////////////////////////////////////////////////


----- Migration e Atualizar Banco -----
Para utilizar o migration, use o comando no projeto, normalmente ele está na pasta (de um cd para frente "cd projeto")
Caso não tiver o dotnet Use ESTE COMANDO no powershell do Desenvolvedor.

- dotnet tool install --global dotnet-ef


- dotnet ef migrations add initial // Initial é o nome dado ao migrations, no caso a migração inicial

- dotnet ef database update // para atualizar o banco de dados.

- dotnet ef database remove // remove a migrations do banco de dados.
